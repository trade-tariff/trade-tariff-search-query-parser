version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  terraform: circleci/terraform@3.2.1
  cloudfoundry: circleci/cloudfoundry@1.0
  gh: circleci/github-cli@1.0
  queue: eddiewebb/queue@1.6.4
  slack: circleci/slack@4.3.0
  tariff: trade-tariff/trade-tariff-ci-orb@dev:8df1e65

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.4.6
    resource_class: small
    working_directory: "/tmp/terraform"
    environment:
      TF_INPUT: 0
      TF_IN_AUTOMATION: 1

commands:
  deploy:
    parameters:
      docker_tag:
        type: string
      space:
        type: string
      environment_key:
        type: string
      app_domain_prefix:
        type: string
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>
      - tariff/deploy-dark-app:
          aws_access_key_id: "$AWS_ACCESS_KEY_ID"
          aws_secret_access_key: "$AWS_SECRET_ACCESS_KEY"
          cf_app: tariff-search-query-parser
          docker_image: tariff-search-query-parser
          docker_tag: << parameters.docker_tag >>
          ecr_repo: "$ECR_REPO"
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>

      - run:
          name: "Map dark routes"
          command: |
            # Map dark route (private)
            cf map-route  \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              apps.internal \
              -n "$CF_APP-<< parameters.environment_key >>-dark"

            # Enable routing from the backend to this app
            cf add-network-policy \
              "$CF_BACKEND_UK_APP-<< parameters.environment_key >>" \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              --protocol tcp \
              --port 8080

            cf add-network-policy \
              "$CF_BACKEND_XI_APP-<< parameters.environment_key >>" \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              --protocol tcp \
              --port 8080

      - tariff/test-dark-app:
          cf_app: tariff-search-query-parser
          environment_key: << parameters.environment_key >>
          healthcheck_path: "/healthcheckz"

      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              apps.internal \
              -n "$CF_APP-<< parameters.environment_key >>-dark"

            # Start sending traffic to new version
            cf map-route \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              apps.internal \
              -n "$CF_APP-<< parameters.environment_key >>"

            cf map-route \
              "$CF_APP-<< parameters.environment_key >>-dark" \
              "<< parameters.app_domain_prefix >>.trade-tariff.service.gov.uk" \
              --path "/api/search"

            # Stop sending traffic to previous version
            cf unmap-route \
              "$CF_APP-<< parameters.environment_key >>" \
              apps.internal \
              -n "$CF_APP-<< parameters.environment_key >>"

            cf unmap-route \
              "$CF_APP-<< parameters.environment_key >>" \
              "<< parameters.app_domain_prefix >>.trade-tariff.service.gov.uk" \
              --path "/api/search"

            # stop previous version
            cf stop "$CF_APP-<< parameters.environment_key >>"

            # delete previous version
            cf delete "$CF_APP-<< parameters.environment_key >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "$CF_APP-<< parameters.environment_key >>-dark" "$CF_APP-<< parameters.environment_key >>"

      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  smoketest:
    parameters:
      space:
        type: string
    steps:
      - run:
          name: "Checkout tests repo"
          command: git clone --depth=1 "https://github.com/trade-tariff/trade-tariff-testing/"
      - restore_cache:
          keys:
            - v1-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
      - run:
          name: "Install NPM packages"
          command: "cd trade-tariff-testing && yarn install"
      - save_cache:
          key: v1-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
          paths:
            - trade-tariff-testing/node_modules
            - /root/.cache/Cypress
      - run:
          name: "Cypress Smoke tests"
          command: |
            cd trade-tariff-testing

            yarn run << parameters.space >>-tariff-search-query-parser-smoketests
jobs:
  lint:
      docker:
        - image: cimg/python:3.11.2
      steps:
          - checkout
          - run:
              name: install flake8
              command: pip install flake8==5.0.4
          - run:
              name: run flake8
              command: flake8 .
  test:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SPACY_DICTIONARY: en_core_web_sm
    steps:
      - checkout
      - restore_cache:
          key: deps-1.0.0-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/test.txt" }}
      - run:
          name: "Setup environment"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/test.txt
            python3 -m spacy download $SPACY_DICTIONARY
      - save_cache:
          key: deps-1.0.0-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/test.txt" }}
          paths:
            - "venv"
      - run:
          name: "Run tests"
          command: |
            . venv/bin/activate
            pytest
  coverage:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SPACY_DICTIONARY: en_core_web_sm
    steps:
      - checkout
      - restore_cache:
          key: deps-1.0.0-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/test.txt" }}
      - run:
          name: "Setup environment"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/test.txt
            python3 -m spacy download $SPACY_DICTIONARY
      - save_cache:
          key: deps-1.0.0-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/test.txt" }}
          paths:
            - "venv"
      - run:
          name: "Run tests"
          command: |
            . venv/bin/activate
            pytest --cov --cov-fail-under 92

  build:
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $CF_APP:$DOCKER_TAG .
      - run:
          name: "Push image to ECR"
          command: |
            export IMAGE_NAME=$CF_APP
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG

  deploy_development:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - queue/until_front_of_line:
          time: "10"
          consider-branch: false
          dont-quit: true
      - deploy:
          docker_tag: "dev-$CIRCLE_SHA1"
          space: "development"
          environment_key: "dev"
          app_domain_prefix: "dev"
      - tariff/sentry-release:
          environment: "development"

  deploy_staging:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SENTRY_ENVIRONMENT: "staging"
    steps:
      - queue/until_front_of_line:
          time: '10'
          consider-branch: true
          dont-quit: true
      - deploy:
          docker_tag: $CIRCLE_SHA1
          space: "staging"
          environment_key: "staging"
          app_domain_prefix: "staging"
      - tariff/sentry-release:
          environment: "staging"

  deploy_release_to_staging:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - deploy:
          docker_tag: $CIRCLE_TAG
          space: "staging"
          environment_key: "staging"
          app_domain_prefix: "staging"
  deploy_production:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SENTRY_ENVIRONMENT: "production"
    steps:
      - deploy:
          docker_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          app_domain_prefix: "www"
      - tariff/sentry-release:
          environment: "production"
      - tariff/notify-production-release:
          app-name: Search Query Parser
          slack-channel: trade_tariff
          release-tag: $CIRCLE_TAG

  smoketest_dev:
    docker:
      - image: "cypress/base:16.5.0"
    steps:
      - smoketest:
          space: dev

  smoketest_staging:
    docker:
      - image: "cypress/base:16.5.0"
    steps:
      - smoketest:
          space: staging

  write_docker_tag:
    parameters:
      environment:
        type: string
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "docker_tag = \"$(git rev-parse --short HEAD)\"" >> terraform/config_<< parameters.environment >>.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - terraform/

  fmt_validate_terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/fmt:
          path: terraform/
      - terraform/validate:
          path: terraform/

  plan_terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/plan:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars

  apply_terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/apply:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars

workflows:
  ci:
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/

      - write_docker_tag:
          environment: development

      - fmt_validate_terraform:
          context: trade-tariff-terraform-aws-development
          environment: development
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/
                - /^hotfix\/.+/

      - plan_terraform:
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - write_docker_tag
            - fmt_validate_terraform
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/
                - /^hotfix\/.+/

      - build:
          name: build_paas_development
          context: trade-tariff
          dev-build: true
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/

      - tariff/build-and-push:
          name: build_and_push_dev
          context: trade-tariff-terraform-aws-development
          environment: development
          image_name: tariff-search-query-parser
          ssm_parameter: "/development/SEARCH_QUERY_PARSER_ECR_URL"
          image: tariff/python
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/
                - /^hotfix\/.+/

      - apply_terraform:
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - plan_terraform
            - build_and_push_dev
          filters:
            branches:
              ignore:
                - /^dependabot/(?!docker/).*/
                - /^hotfix\/.+/

      - test:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main

      - coverage:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main

      - deploy_development:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/
          requires:
            - build_paas_development
            - test

      - smoketest_dev:
          name: smoketest_dev
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^hotfix\/.+/
                - /^dependabot/(?!docker/).*/
          requires:
            - deploy_development

      - build:
          name: build_paas_live
          context: trade-tariff
          filters:
            branches:
              only:
                - main

      - deploy_staging:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
          requires:
            - build_paas_live

      - smoketest_staging:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
                - /^hotfix\/.+/
          requires:
            - deploy_staging

      - hold_create_release:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_staging

      - tariff/create-production-release:
          context: trade-tariff
          image-name: tariff-search-query-parser
          filters:
            branches:
              only:
                - main
          requires:
            - hold_create_release

      - deploy_release_to_staging:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/

      - smoketest_staging:
          name: smoketest_release_to_staging
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - deploy_release_to_staging

      - hold_deploy_production:
          type: approval
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/

      - deploy_production:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - hold_deploy_production
