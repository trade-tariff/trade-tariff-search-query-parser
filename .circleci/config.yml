version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  cloudfoundry: circleci/cloudfoundry@1.0
  gh: circleci/github-cli@1.0
  queue: eddiewebb/queue@1.6.4
  slack: circleci/slack@4.3.0
  tariff: trade-tariff/trade-tariff-ci-orb@0 # can also change to @dev:<gitsha> for specific version or @dev:alpha to test dev branches

commands:
  deploy:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      environment_key:
        type: string
      app_domain_prefix:
        type: string
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "$CF_APP-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            export DOCKER_IMAGE=$CF_APP
            export DOCKER_TAG="<< parameters.docker_image_tag >>"

            # Push as "dark" instance
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "$CF_APP-<< parameters.environment_key >>-dark" -f deploy_manifest.yml --no-route --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" --docker-username "$AWS_ACCESS_KEY_ID"

            # Map dark route (private)
            cf map-route  "$CF_APP-<< parameters.environment_key >>-dark" apps.internal -n "$CF_APP-<< parameters.environment_key >>-dark"


            # Enable routing from the backend to this app
            cf add-network-policy "$CF_BACKEND_UK_APP-<< parameters.environment_key >>" "$CF_APP-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_BACKEND_XI_APP-<< parameters.environment_key >>" "$CF_APP-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 4

            APP_NAME="$CF_APP-<< parameters.environment_key >>-dark"

            HTTPCODE=$(cf ssh $APP_NAME -c 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/search/healthcheck')

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              cf logs "$CF_APP-<< parameters.environment_key >>-dark" --recent
              cf delete -f "$CF_APP-<< parameters.environment_key >>-dark"
              exit 1
            fi
      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route "$CF_APP-<< parameters.environment_key >>-dark" apps.internal -n "$CF_APP-<< parameters.environment_key >>-dark"

            # Start sending traffic to new version
            cf map-route "$CF_APP-<< parameters.environment_key >>-dark" apps.internal -n "$CF_APP-<< parameters.environment_key >>"
            cf map-route "$CF_APP-<< parameters.environment_key >>-dark" "<< parameters.app_domain_prefix >>.trade-tariff.service.gov.uk" --path "/api/search"

            # Stop sending traffic to previous version
            cf unmap-route "$CF_APP-<< parameters.environment_key >>" apps.internal -n "$CF_APP-<< parameters.environment_key >>"
            cf unmap-route "$CF_APP-<< parameters.environment_key >>" "<< parameters.app_domain_prefix >>.trade-tariff.service.gov.uk"  --path "/api/search"

            # stop previous version
            cf stop "$CF_APP-<< parameters.environment_key >>"

            # delete previous version
            cf delete "$CF_APP-<< parameters.environment_key >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "$CF_APP-<< parameters.environment_key >>-dark" "$CF_APP-<< parameters.environment_key >>"
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1
  sentry-release:
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            sudo curl -sL \
                      -o /usr/local/bin/sentry-cli \
                      https://github.com/getsentry/sentry-cli/releases/download/1.74.3/sentry-cli-Linux-x86_64
            sudo chmod 0755 /usr/local/bin/sentry-cli
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE &&
              sentry-cli releases set-commits $SENTRY_RELEASE --auto &&
              sentry-cli releases finalize $SENTRY_RELEASE &&
              sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT ||
              /usr/bin/true # prevent sentry outage from blocking deploys - see HOTT-1570


  smoketest:
    parameters:
      space:
        type: string
    steps:
      - run:
          name: "Checkout tests repo"
          command: git clone --depth=1 "https://github.com/trade-tariff/trade-tariff-testing/"
      - restore_cache:
          keys:
            - v1-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
      - run:
          name: "Install NPM packages"
          command: "cd trade-tariff-testing && yarn install"
      - save_cache:
          key: v1-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
          paths:
            - trade-tariff-testing/node_modules
            - /root/.cache/Cypress
      - run:
          name: "Cypress Smoke tests"
          command: |
            cd trade-tariff-testing

            yarn run << parameters.space >>-tariff-search-query-parser-smoketests
jobs:
  lint:
      docker:
        - image: cimg/python:3.11.2
      steps:
          - checkout
          - run:
              name: install flake8
              command: pip install flake8==5.0.4
          - run:
              name: run flake8
              command: flake8 .
  test:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SPACY_DICTIONARY: en_core_web_sm
    steps:
      - checkout
      - restore_cache:
          key: deps-1.0.0-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/test.txt" }}
      - run:
          name: "Setup environment"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/test.txt
            python3 -m spacy download $SPACY_DICTIONARY
      - save_cache:
          key: deps-1.0.0-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/test.txt" }}
          paths:
            - "venv"
      - run:
          name: "Run tests"
          command: |
            . venv/bin/activate
            pytest
  coverage:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SPACY_DICTIONARY: en_core_web_sm
    steps:
      - checkout
      - restore_cache:
          key: deps-1.0.0-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/test.txt" }}
      - run:
          name: "Setup environment"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements/test.txt
            python3 -m spacy download $SPACY_DICTIONARY
      - save_cache:
          key: deps-1.0.0-{{ checksum "requirements/common.txt" }}-{{ checksum "requirements/test.txt" }}
          paths:
            - "venv"
      - run:
          name: "Run tests"
          command: |
            . venv/bin/activate
            pytest --cov --cov-fail-under 92

  build:
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/python:3.11.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $CF_APP:$DOCKER_TAG .
      - run:
          name: "Push image to ECR"
          command: |
            export IMAGE_NAME=$CF_APP
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
  deploy_development:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SENTRY_ENVIRONMENT: "development"
    steps:
      - queue/until_front_of_line:
          time: "10"
          consider-branch: false
          dont-quit: true
      - deploy:
          docker_image_tag: "dev-$CIRCLE_SHA1"
          space: "development"
          environment_key: "dev"
          app_domain_prefix: "dev"
      - sentry-release

  deploy_staging:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SENTRY_ENVIRONMENT: "staging"
    steps:
      - queue/until_front_of_line:
          time: '10'
          consider-branch: true
          dont-quit: true
      - deploy:
          docker_image_tag: $CIRCLE_SHA1
          space: "staging"
          environment_key: "staging"
          app_domain_prefix: "staging"
      - sentry-release
  deploy_release_to_staging:
    docker:
      - image: cimg/python:3.11.2
    steps:
      - deploy:
          docker_image_tag: $CIRCLE_TAG
          space: "staging"
          environment_key: "staging"
          app_domain_prefix: "staging"
  deploy_production:
    docker:
      - image: cimg/python:3.11.2
    environment:
      SENTRY_ENVIRONMENT: "production"
    steps:
      - deploy:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          app_domain_prefix: "www"
      - sentry-release
      - tariff/notify-production-release:
          app-name: Search Query Parser
          slack-channel: trade_tariff
          release-tag: $CIRCLE_TAG

  smoketest_dev:
    docker:
      - image: "cypress/base:16.5.0"
    steps:
      - smoketest:
          space: dev

  smoketest_staging:
    docker:
      - image: "cypress/base:16.5.0"
    steps:
      - smoketest:
          space: staging

workflows:
  ci:
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/
      - build:
          name: build_dev
          context: trade-tariff
          dev-build: true
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/
      - test:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
      - coverage:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
      - deploy_development:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^dependabot/(?!docker/).*/
          requires:
            - build_dev
            - test
      - smoketest_dev:
          name: smoketest_dev
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^hotfix\/.+/
                - /^dependabot/(?!docker/).*/
          requires:
            - deploy_development
      - build:
          name: build_live
          context: trade-tariff
          filters:
            branches:
              only:
                - main
      - deploy_staging:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
          requires:
            - build_live
      - smoketest_staging:
          context: trade-tariff
          filters:
            branches:
              only:
                - main
                - /^hotfix\/.+/
          requires:
            - deploy_staging
      - hold_create_release:
          type: approval
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_staging
      - tariff/create-production-release:
          context: trade-tariff
          image-name: tariff-search-query-parser
          filters:
            branches:
              only:
                - main
          requires:
            - hold_create_release
      - deploy_release_to_staging:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
      - smoketest_staging:
          name: smoketest_release_to_staging
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - deploy_release_to_staging
      - hold_deploy_production:
          type: approval
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
      - deploy_production:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - hold_deploy_production
